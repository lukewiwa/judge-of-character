/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    Leader,
    LeaderFromJSON,
    LeaderToJSON,
    Stat,
    StatFromJSON,
    StatToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserDetail,
    UserDetailFromJSON,
    UserDetailToJSON,
} from '../models';

export interface CreateStatRequest {
    points: number;
    level: number;
    url?: string;
}

export interface DestroyStatRequest {
    id: string;
}

export interface ListLeadersRequest {
    page?: number;
    pageSize?: number;
}

export interface ListUsersRequest {
    page?: number;
    pageSize?: number;
}

export interface PartialUpdateStatRequest {
    id: string;
    points: number;
    level: number;
    url?: string;
}

export interface PartialUpdateUserRequest {
    id: string;
    id?: string;
    username?: string;
    url?: string;
}

export interface RetrieveLeaderRequest {
    id: string;
}

export interface RetrieveStatRequest {
    id: string;
}

export interface RetrieveUserRequest {
    id: string;
}

export interface UpdateStatRequest {
    id: string;
    points: number;
    level: number;
    url?: string;
}

export interface UpdateUserRequest {
    id: string;
    id?: string;
    username?: string;
    url?: string;
}

/**
 * ApiApi - interface
 * 
 * @export
 * @interface ApiApiInterface
 */
export interface ApiApiInterface {
    /**
     * 
     * @param {number} points 
     * @param {number} level 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    createStatRaw(requestParameters: CreateStatRequest): Promise<runtime.ApiResponse<Stat>>;

    /**
     */
    createStat(requestParameters: CreateStatRequest): Promise<Stat>;

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    currentUserRaw(): Promise<runtime.ApiResponse<UserDetail>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    currentUser(): Promise<UserDetail>;

    /**
     * 
     * @param {string} id A UUID string identifying this stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    destroyStatRaw(requestParameters: DestroyStatRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    destroyStat(requestParameters: DestroyStatRequest): Promise<void>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    listLeadersRaw(requestParameters: ListLeadersRequest): Promise<runtime.ApiResponse<InlineResponse2001>>;

    /**
     */
    listLeaders(requestParameters: ListLeadersRequest): Promise<InlineResponse2001>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    listStatsRaw(): Promise<runtime.ApiResponse<Array<Stat>>>;

    /**
     */
    listStats(): Promise<Array<Stat>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<InlineResponse200>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    listUsers(requestParameters: ListUsersRequest): Promise<InlineResponse200>;

    /**
     * 
     * @param {string} id A UUID string identifying this stat.
     * @param {number} points 
     * @param {number} level 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    partialUpdateStatRaw(requestParameters: PartialUpdateStatRequest): Promise<runtime.ApiResponse<Stat>>;

    /**
     */
    partialUpdateStat(requestParameters: PartialUpdateStatRequest): Promise<Stat>;

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {string} [id] 
     * @param {string} [username] Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    partialUpdateUser(requestParameters: PartialUpdateUserRequest): Promise<User>;

    /**
     * 
     * @param {string} id A UUID string identifying this leader.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    retrieveLeaderRaw(requestParameters: RetrieveLeaderRequest): Promise<runtime.ApiResponse<Leader>>;

    /**
     */
    retrieveLeader(requestParameters: RetrieveLeaderRequest): Promise<Leader>;

    /**
     * 
     * @param {string} id A UUID string identifying this stat.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    retrieveStatRaw(requestParameters: RetrieveStatRequest): Promise<runtime.ApiResponse<Stat>>;

    /**
     */
    retrieveStat(requestParameters: RetrieveStatRequest): Promise<Stat>;

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    retrieveUserRaw(requestParameters: RetrieveUserRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    retrieveUser(requestParameters: RetrieveUserRequest): Promise<User>;

    /**
     * 
     * @param {string} id A UUID string identifying this stat.
     * @param {number} points 
     * @param {number} level 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    updateStatRaw(requestParameters: UpdateStatRequest): Promise<runtime.ApiResponse<Stat>>;

    /**
     */
    updateStat(requestParameters: UpdateStatRequest): Promise<Stat>;

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A UUID string identifying this user.
     * @param {string} [id] 
     * @param {string} [username] Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<User>;

}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI implements ApiApiInterface {

    /**
     */
    async createStatRaw(requestParameters: CreateStatRequest): Promise<runtime.ApiResponse<Stat>> {
        if (requestParameters.points === null || requestParameters.points === undefined) {
            throw new runtime.RequiredError('points','Required parameter requestParameters.points was null or undefined when calling createStat.');
        }

        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling createStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.points !== undefined) {
            formParams.append('points', requestParameters.points as any);
        }

        if (requestParameters.level !== undefined) {
            formParams.append('level', requestParameters.level as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/v1/stats/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatFromJSON(jsonValue));
    }

    /**
     */
    async createStat(requestParameters: CreateStatRequest): Promise<Stat> {
        const response = await this.createStatRaw(requestParameters);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async currentUserRaw(): Promise<runtime.ApiResponse<UserDetail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/current/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async currentUser(): Promise<UserDetail> {
        const response = await this.currentUserRaw();
        return await response.value();
    }

    /**
     */
    async destroyStatRaw(requestParameters: DestroyStatRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyStat(requestParameters: DestroyStatRequest): Promise<void> {
        await this.destroyStatRaw(requestParameters);
    }

    /**
     */
    async listLeadersRaw(requestParameters: ListLeadersRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/leaderboard/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     */
    async listLeaders(requestParameters: ListLeadersRequest): Promise<InlineResponse2001> {
        const response = await this.listLeadersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listStatsRaw(): Promise<runtime.ApiResponse<Array<Stat>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stats/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatFromJSON));
    }

    /**
     */
    async listStats(): Promise<Array<Stat>> {
        const response = await this.listStatsRaw();
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listUsers(requestParameters: ListUsersRequest): Promise<InlineResponse200> {
        const response = await this.listUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateStatRaw(requestParameters: PartialUpdateStatRequest): Promise<runtime.ApiResponse<Stat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStat.');
        }

        if (requestParameters.points === null || requestParameters.points === undefined) {
            throw new runtime.RequiredError('points','Required parameter requestParameters.points was null or undefined when calling partialUpdateStat.');
        }

        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling partialUpdateStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.points !== undefined) {
            formParams.append('points', requestParameters.points as any);
        }

        if (requestParameters.level !== undefined) {
            formParams.append('level', requestParameters.level as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/v1/stats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateStat(requestParameters: PartialUpdateStatRequest): Promise<Stat> {
        const response = await this.partialUpdateStatRaw(requestParameters);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateUser(requestParameters: PartialUpdateUserRequest): Promise<User> {
        const response = await this.partialUpdateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveLeaderRaw(requestParameters: RetrieveLeaderRequest): Promise<runtime.ApiResponse<Leader>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveLeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/leaderboard/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderFromJSON(jsonValue));
    }

    /**
     */
    async retrieveLeader(requestParameters: RetrieveLeaderRequest): Promise<Leader> {
        const response = await this.retrieveLeaderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveStatRaw(requestParameters: RetrieveStatRequest): Promise<runtime.ApiResponse<Stat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatFromJSON(jsonValue));
    }

    /**
     */
    async retrieveStat(requestParameters: RetrieveStatRequest): Promise<Stat> {
        const response = await this.retrieveStatRaw(requestParameters);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveUserRaw(requestParameters: RetrieveUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveUser(requestParameters: RetrieveUserRequest): Promise<User> {
        const response = await this.retrieveUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateStatRaw(requestParameters: UpdateStatRequest): Promise<runtime.ApiResponse<Stat>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStat.');
        }

        if (requestParameters.points === null || requestParameters.points === undefined) {
            throw new runtime.RequiredError('points','Required parameter requestParameters.points was null or undefined when calling updateStat.');
        }

        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling updateStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.points !== undefined) {
            formParams.append('points', requestParameters.points as any);
        }

        if (requestParameters.level !== undefined) {
            formParams.append('level', requestParameters.level as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/v1/stats/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatFromJSON(jsonValue));
    }

    /**
     */
    async updateStat(requestParameters: UpdateStatRequest): Promise<Stat> {
        const response = await this.updateStatRaw(requestParameters);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<User> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
